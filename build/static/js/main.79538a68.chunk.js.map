{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EXCHANGE_HREF_BTC","Bitfinex","EXCHANGE_HREF_ETH","App","useState","btc_bid","btc_ask","eth_bid","eth_ask","cex","setCex","bitfinex","setBitfinex","buy_btc","sell_btc","buy_eth","sell_eth","rec","setRec","useEffect","fetch","then","res","json","data","rec_buy_btc","rec_sell_btc","rec_buy_eth","rec_sell_eth","className","style","fontSize","paddingBottom","href","target","rel","width","align","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79538a68.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst EXCHANGE_HREF_BTC = {\n  \"Cex.io\": \"https://cex.io/btc-usd\",\n  Bitfinex: \"https://www.bitfinex.com/t/BTC:USD\",\n};\n\nconst EXCHANGE_HREF_ETH = {\n  \"Cex.io\": \"https://cex.io/eth-usd\",\n  Bitfinex: \"https://www.bitfinex.com/t/ETH:USD\",\n};\n\nfunction App() {\n  const [cex, setCex] = useState({\n    btc_bid: 0,\n    btc_ask: 0,\n    eth_bid: 0,\n    eth_ask: 0,\n  });\n  const [bitfinex, setBitfinex] = useState({\n    btc_bid: 0,\n    btc_ask: 0,\n    eth_bid: 0,\n    eth_ask: 0,\n  });\n  const [rec, setRec] = useState({\n    buy_btc: \"\",\n    sell_btc: \"\",\n    buy_eth: \"\",\n    sell_eth: \"\",\n  });\n\n  useEffect(() => {\n    fetch(\"/api/cex\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCex({\n          btc_bid: data.btc_bid,\n          btc_ask: data.btc_ask,\n          eth_bid: data.eth_bid,\n          eth_ask: data.eth_ask,\n        });\n      });\n\n    fetch(\"/api/bitfinex\")\n      .then((res) => res.json())\n      .then((data) => {\n        setBitfinex({\n          btc_bid: data.btc_bid,\n          btc_ask: data.btc_ask,\n          eth_bid: data.eth_bid,\n          eth_ask: data.eth_ask,\n        });\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"/api/rec\")\n      .then((res) => res.json())\n      .then((data) => {\n        setRec({\n          buy_btc: data.rec_buy_btc,\n          sell_btc: data.rec_sell_btc,\n          buy_eth: data.rec_buy_eth,\n          sell_eth: data.rec_sell_eth,\n        });\n      });\n  }, [cex, bitfinex]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <strong style={{ fontSize: 80, paddingBottom: \"10px\" }}>\n          Welcome to crypt-recommender!\n        </strong>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/JFChoe/my-crypt\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Source code can be found here.\n        </a>\n        <header className=\"Coin-header\">\n          <p>\n            We recommend to buy/sell crypto-currency from the exchanges below\n          </p>\n        </header>\n        <table style={{ width: \"30%\" }}>\n          <thead>\n            <tr>\n              <th>Coin</th>\n              <th>Buy</th>\n              <th>Sell</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Bitcoin (BTC)</td>\n              <td>\n                <a\n                  className=\"App-link\"\n                  href={EXCHANGE_HREF_BTC[rec.buy_btc]}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {rec.buy_btc}\n                </a>\n              </td>\n              <td>\n                <a\n                  className=\"App-link\"\n                  href={EXCHANGE_HREF_BTC[rec.sell_btc]}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {rec.sell_btc}\n                </a>\n              </td>\n            </tr>\n            <tr>\n              <td>Ethereum (ETH)</td>\n              <td>\n                <a\n                  className=\"App-link\"\n                  href={EXCHANGE_HREF_ETH[rec.buy_eth]}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {rec.buy_eth}\n                </a>\n              </td>\n              <td>\n                <a\n                  className=\"App-link\"\n                  href={EXCHANGE_HREF_ETH[rec.sell_eth]}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {rec.sell_eth}\n                </a>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </header>\n      <hr />\n      <table align=\"center\">\n        <tr>\n          <td>\n            <table style={{ width: \"50%\" }}>\n              <caption style={{ color: \"ActiveCaption\" }}>\n                Most recent bid offer price\n              </caption>\n              <thead>\n                <tr>\n                  <th>Coin</th>\n                  <th>Cex.io</th>\n                  <th>Bitfinex</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Bitcoin (BTC)</td>\n                  <td>${cex.btc_bid}</td>\n                  <td>${bitfinex.btc_bid}</td>\n                </tr>\n                <tr>\n                  <td>Ethereum (ETH)</td>\n                  <td>${cex.eth_bid}</td>\n                  <td>${bitfinex.eth_bid}</td>\n                </tr>\n              </tbody>\n            </table>\n          </td>\n          <td>\n            <table style={{ width: \"50%\" }}>\n              <caption style={{ color: \"ActiveCaption\" }}>\n                Most recent ask offer price\n              </caption>\n              <thead>\n                <tr>\n                  <th>Coin</th>\n                  <th>Cex.io</th>\n                  <th>Bitfinex</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Bitcoin (BTC)</td>\n                  <td>${cex.btc_ask}</td>\n                  <td>${bitfinex.btc_ask}</td>\n                </tr>\n                <tr>\n                  <td>Ethereum (ETH)</td>\n                  <td>${cex.eth_ask}</td>\n                  <td>${bitfinex.eth_ask}</td>\n                </tr>\n              </tbody>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}